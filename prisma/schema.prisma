// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  
  // Productivity app data
  energyLogs    EnergyLog[]
  pomodoroSessions PomodoroSession[]
  skills        Skill[]
  notes         Note[]
  todos         Todo[]
  habits        Habit[]
  habitCompletions HabitCompletion[]
  journalEntries JournalEntry[]
  goals         Goal[]
  milestones    Milestone[]
  tasks         Task[]
  books         Book[]
  transactions  Transaction[]
  budgets       Budget[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Energy tracking
model EnergyLog {
  id          String   @id @default(cuid())
  userId      String
  energyLevel Int
  focusLevel  Int
  notes       String?  @db.Text
  date        DateTime
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Pomodoro
model PomodoroSession {
  id          String   @id @default(cuid())
  userId      String
  duration    Int      // in seconds
  completed   Boolean  @default(true)
  date        DateTime
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Skills
model Skill {
  id          String   @id @default(cuid())
  userId      String
  name        String
  category    String
  progress    Int      // percentage
  hoursSpent  Float
  lastPracticed DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Notes
model Note {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String   @db.Text
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Todo lists
model Todo {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?  @db.Text
  dueDate     DateTime?
  completed   Boolean  @default(false)
  priority    String   // low, medium, high
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Habits
model Habit {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?  @db.Text
  category    String
  frequency   String   // daily, weekly, monthly
  color       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  completions HabitCompletion[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HabitCompletion {
  id          String   @id @default(cuid())
  habitId     String
  userId      String
  date        DateTime
  completed   Boolean
  notes       String?  @db.Text
  createdAt   DateTime @default(now())
  
  habit       Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([habitId, date])
}

// Journal
model JournalEntry {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String   @db.Text
  mood        String
  tags        String[] // Array of tags
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Goals
model Goal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?  @db.Text
  category    String
  targetDate  DateTime?
  progress    Int      // percentage
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  milestones  Milestone[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Milestone {
  id          String   @id @default(cuid())
  goalId      String
  userId      String
  title       String
  description String?  @db.Text
  dueDate     DateTime?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  tasks       Task[]
  goal        Goal     @relation(fields: [goalId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          String   @id @default(cuid())
  milestoneId String
  userId      String
  title       String
  description String?  @db.Text
  dueDate     DateTime?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  milestone   Milestone @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Bookshelf
model Book {
  id          String   @id @default(cuid())
  userId      String
  title       String
  author      String
  type        String   // physical, ebook, audiobook, pdf, link
  category    String
  status      String   // to-read, reading, completed, reference
  rating      Int?
  notes       String?  @db.Text
  link        String?
  coverImage  String?
  dateAdded   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Finances
model Transaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  type        String   // income, expense
  category    String
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Budget {
  id          String   @id @default(cuid())
  userId      String
  category    String
  amount      Float
  spent       Float
  period      String   // monthly, yearly
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, category])
}

